export interface TarSerializable {
    toUint8Array(): Uint8Array;
}
export declare namespace TarUtility {
    function isNumber(value: any): value is number;
    function isString(value: any): value is string;
    function isUndefined(value: any): value is undefined;
    function isObject(value: any): value is object;
    function isDefined(value: any): boolean;
    function isPopulatedString(value: any): boolean;
    function isUint8Array(value: any): value is Uint8Array;
    function sizeofUint8Array(value: any): number;
    function encodeString(input: string): Uint8Array;
    function decodeString(input: Uint8Array): string;
    function generateChecksum(input: Uint8Array): number;
    function clamp(value: number, min: number, max: number): number;
    function advanceSectorOffset(currentOffset: number, maxOffset: number): number;
    function advanceSectorOffsetUnclamped(currentOffset: number): number;
    function roundUpSectorOffset(currentOffset: number): number;
    function getSectorOffsetDelta(currentOffset: number): number;
    function parseIntOctal(input: string): number;
    function dateTimeToUstar(dateTime: number): number;
    function ustarTimeToDate(ustarTime: number): number;
    function sanitizeDateTimeAsUstar(dateTime: number): number;
    function getUstarTimestamp(): number;
    function paxTimeToDate(paxTime: number): number;
    function paxTimeToUstar(paxTime: number): number;
    function getDebugHexString(v: Uint8Array | null | undefined): string;
    function getDebugBufferJson(v: Uint8Array | null | undefined): {
        byteLength: number;
        content: string;
    };
    function removeTrailingZeros(str: string): string;
    function parseIntSafe(value: any, radix?: number, defaultValue?: number): number;
    function parseFloatSafe(value: any, defaultValue?: number): number;
    function cloneUint8Array(source: Uint8Array | null, start?: number, end?: number): Uint8Array;
    function concatUint8Arrays(a: Uint8Array, b: Uint8Array): Uint8Array;
}
