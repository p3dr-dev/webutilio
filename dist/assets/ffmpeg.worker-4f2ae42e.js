(function(){"use strict";var a;(function(s){s.LOAD="LOAD",s.EXEC="EXEC",s.FFPROBE="FFPROBE",s.WRITE_FILE="WRITE_FILE",s.READ_FILE="READ_FILE",s.DELETE_FILE="DELETE_FILE",s.RENAME="RENAME",s.CREATE_DIR="CREATE_DIR",s.LIST_DIR="LIST_DIR",s.DELETE_DIR="DELETE_DIR",s.ERROR="ERROR",s.DOWNLOAD="DOWNLOAD",s.PROGRESS="PROGRESS",s.LOG="LOG",s.MOUNT="MOUNT",s.UNMOUNT="UNMOUNT"})(a||(a={}));const R=(()=>{let s=0;return()=>s++})(),c=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),d=new Error("called FFmpeg.terminate()");class h{#t=null;#r={};#s={};#a=[];#i=[];loaded=!1;#o=()=>{this.#t&&(this.#t.onmessage=({data:{id:e,type:t,data:r}})=>{switch(t){case a.LOAD:this.loaded=!0,this.#r[e](r);break;case a.MOUNT:case a.UNMOUNT:case a.EXEC:case a.FFPROBE:case a.WRITE_FILE:case a.READ_FILE:case a.DELETE_FILE:case a.RENAME:case a.CREATE_DIR:case a.LIST_DIR:case a.DELETE_DIR:this.#r[e](r);break;case a.LOG:this.#a.forEach(i=>i(r));break;case a.PROGRESS:this.#i.forEach(i=>i(r));break;case a.ERROR:this.#s[e](r);break}delete this.#r[e],delete this.#s[e]})};#e=({type:e,data:t},r=[],i)=>this.#t?new Promise((f,n)=>{const E=R();this.#t&&this.#t.postMessage({id:E,type:e,data:t},r),this.#r[E]=f,this.#s[E]=n,i?.addEventListener("abort",()=>{n(new DOMException(`Message # ${E} was aborted`,"AbortError"))},{once:!0})}):Promise.reject(c);on(e,t){e==="log"?this.#a.push(t):e==="progress"&&this.#i.push(t)}off(e,t){e==="log"?this.#a=this.#a.filter(r=>r!==t):e==="progress"&&(this.#i=this.#i.filter(r=>r!==t))}load=({classWorkerURL:e,...t}={},{signal:r}={})=>(this.#t||(this.#t=e?new Worker(new URL(e,self.location.href),{type:"module"}):new Worker(new URL("/assets/worker-224792ee.js",self.location),{type:"module"}),this.#o()),this.#e({type:a.LOAD,data:t},void 0,r));exec=(e,t=-1,{signal:r}={})=>this.#e({type:a.EXEC,data:{args:e,timeout:t}},void 0,r);ffprobe=(e,t=-1,{signal:r}={})=>this.#e({type:a.FFPROBE,data:{args:e,timeout:t}},void 0,r);terminate=()=>{const e=Object.keys(this.#s);for(const t of e)this.#s[t](d),delete this.#s[t],delete this.#r[t];this.#t&&(this.#t.terminate(),this.#t=null,this.loaded=!1)};writeFile=(e,t,{signal:r}={})=>{const i=[];return t instanceof Uint8Array&&i.push(t.buffer),this.#e({type:a.WRITE_FILE,data:{path:e,data:t}},i,r)};mount=(e,t,r)=>{const i=[];return this.#e({type:a.MOUNT,data:{fsType:e,options:t,mountPoint:r}},i)};unmount=e=>{const t=[];return this.#e({type:a.UNMOUNT,data:{mountPoint:e}},t)};readFile=(e,t="binary",{signal:r}={})=>this.#e({type:a.READ_FILE,data:{path:e,encoding:t}},void 0,r);deleteFile=(e,{signal:t}={})=>this.#e({type:a.DELETE_FILE,data:{path:e}},void 0,t);rename=(e,t,{signal:r}={})=>this.#e({type:a.RENAME,data:{oldPath:e,newPath:t}},void 0,r);createDir=(e,{signal:t}={})=>this.#e({type:a.CREATE_DIR,data:{path:e}},void 0,t);listDir=(e,{signal:t}={})=>this.#e({type:a.LIST_DIR,data:{path:e}},void 0,t);deleteDir=(e,{signal:t}={})=>this.#e({type:a.DELETE_DIR,data:{path:e}},void 0,t)}var l;(function(s){s.MEMFS="MEMFS",s.NODEFS="NODEFS",s.NODERAWFS="NODERAWFS",s.IDBFS="IDBFS",s.WORKERFS="WORKERFS",s.PROXYFS="PROXYFS"})(l||(l={}));let o=null;async function p(){return o||(o=new h,o.on("log",({message:s})=>{self.postMessage({type:"log",message:s})}),o.on("progress",({progress:s,time:e})=>{self.postMessage({type:"progress",progress:s,time:e})}),await o.load({coreURL:"/ffmpeg/ffmpeg-core.js",wasmURL:"/ffmpeg/ffmpeg-core.wasm",workerURL:"/ffmpeg/ffmpeg-core.js"}),self.postMessage({type:"log",message:"[ffmpeg.worker] FFmpeg loaded successfully."}),o)}self.onmessage=async s=>{const{type:e,payload:t}=s.data;try{const r=await p();switch(e){case"run":{const{file:i,fileName:f,outputFileName:n,args:E}=t;await r.writeFile(f,await i.arrayBuffer()),self.postMessage({type:"log",message:`[ffmpeg.worker] Wrote file: ${f}`}),await r.exec(E),self.postMessage({type:"log",message:`[ffmpeg.worker] Executed command: ${E.join(" ")}`});const u=await r.readFile(n);self.postMessage({type:"log",message:`[ffmpeg.worker] Read output file: ${n}`}),self.postMessage({type:"result",data:u,outputFileName:n});break}default:self.postMessage({type:"log",message:`[ffmpeg.worker] Unknown message type: ${e}`})}}catch(r){self.postMessage({type:"error",message:r.message})}}})();
